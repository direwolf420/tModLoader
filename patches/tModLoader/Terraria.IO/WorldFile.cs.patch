--- src/Terraria/Terraria.IO/WorldFile.cs
+++ src/tModLoader/Terraria.IO/WorldFile.cs
@@ -11,6 +_,8 @@
 using Terraria.Localization;
 using Terraria.Social;
 using Terraria.Utilities;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 
 namespace Terraria.IO
 {
@@ -154,6 +_,7 @@
 			Main.checkXMas();
 			Main.checkHalloween();
 			bool flag = loadFromCloud && SocialAPI.Cloud != null;
+			//patch file: flag
 			if (!FileUtilities.Exists(Main.worldPathName, flag) && Main.autoGen) {
 				if (!flag) {
 					for (int num = Main.worldPathName.Length - 1; num >= 0; num--) {
@@ -192,6 +_,8 @@
 
 						binaryReader.Close();
 						memoryStream.Close();
+						WorldHooks.SetupWorld();
+						WorldIO.Load(Main.worldPathName, flag);
 						if (num3 != 0)
 							WorldGen.loadFailed = true;
 						else
@@ -294,6 +_,9 @@
 				if (Main.worldPathName == null)
 					return;
 
+				if (!BackupIO.archiveLock)
+					BackupIO.World.ArchiveWorld(Main.worldPathName, useCloudSaving);
+
 				new Stopwatch().Start();
 				byte[] array = null;
 				int num = 0;
@@ -333,6 +_,7 @@
 				if (text != null && array2 != null)
 					FileUtilities.WriteAllBytes(text, array2, useCloudSaving);
 
+				WorldIO.Save(Main.worldPathName, useCloudSaving);
 				WorldGen.saveLock = false;
 			}
 
@@ -939,7 +_,11 @@
 			}
 
 			writer.Write(NPC.savedAngler);
+			if (Main.anglerQuest < ItemLoader.vanillaQuestFishCount)
-			writer.Write(Main.anglerQuest);
+				writer.Write(Main.anglerQuest);
+			else
+				writer.Write(0);
+
 			writer.Write(NPC.savedStylist);
 			writer.Write(NPC.savedTaxCollector);
 			writer.Write(Main.invasionSizeStart);
@@ -998,7 +_,7 @@
 					byte b2;
 					byte b3 = b2 = (b = 0);
 					bool flag = false;
-					if (tile.active()) {
+					if (tile.active() && tile.type < TileID.Count) {
 						flag = true;
 						if (tile.type == 127) {
 							WorldGen.KillTile(i, num2);
@@ -1027,9 +_,11 @@
 						}
 
 						if (Main.tileFrameImportant[tile.type]) {
+							short frameX = tile.frameX;
+							TileIO.VanillaSaveFrames(tile, ref frameX);
-							array[num3] = (byte)(tile.frameX & 0xFF);
+							array[num3] = (byte)(frameX & 0xFF);
 							num3++;
-							array[num3] = (byte)((tile.frameX & 0xFF00) >> 8);
+							array[num3] = (byte)((frameX & 0xFF00) >> 8);
 							num3++;
 							array[num3] = (byte)(tile.frameY & 0xFF);
 							num3++;
@@ -1044,9 +_,9 @@
 						}
 					}
 
-					if (tile.wall != 0) {
+					if (tile.wall != 0 && tile.wall < WallID.Count) {
 						b3 = (byte)(b3 | 4);
-						array[num3] = tile.wall;
+						array[num3] = (byte)tile.wall;
 						num3++;
 						if (tile.wallColor() != 0) {
 							b = (byte)(b | 0x10);
@@ -1166,7 +_,7 @@
 				writer.Write(chest.name);
 				for (int l = 0; l < 40; l++) {
 					Item item = chest.item[l];
-					if (item == null) {
+					if (item == null || item.modItem != null) {
 						writer.Write((short)0);
 						continue;
 					}
@@ -1232,7 +_,7 @@
 		private static int SaveNPCs(BinaryWriter writer) {
 			for (int i = 0; i < Main.npc.Length; i++) {
 				NPC nPC = Main.npc[i];
-				if (nPC.active && nPC.townNPC && nPC.type != 368) {
+				if (nPC.active && nPC.townNPC && nPC.type != 368 && !NPCLoader.IsModNPC(nPC)) {
 					writer.Write(nPC.active);
 					writer.Write(nPC.netID);
 					writer.Write(nPC.GivenName);
@@ -1247,7 +_,7 @@
 			writer.Write(value: false);
 			for (int j = 0; j < Main.npc.Length; j++) {
 				NPC nPC2 = Main.npc[j];
-				if (nPC2.active && NPCID.Sets.SavesAndLoads[nPC2.type]) {
+				if (nPC2.active && NPCID.Sets.SavesAndLoads[nPC2.type] && !NPCLoader.IsModNPC(nPC2)) {
 					writer.Write(nPC2.active);
 					writer.Write(nPC2.netID);
 					writer.WriteVector2(nPC2.position);
@@ -1811,7 +_,7 @@
 				int num3 = reader.ReadInt32();
 				Tile tile = Main.tile[num2, num3];
 				Sign sign;
-				if (tile.active() && Main.tileSign[tile.type]) {
+				if (true) {//if (tile.active() && Main.tileSign[tile.type]) {
 					sign = new Sign();
 					sign.text = text;
 					sign.x = num2;
@@ -2083,6 +_,7 @@
 				return result;
 			}
 			catch (Exception value) {
+				Logging.Terraria.Error("World Validation", value);
 				using (StreamWriter streamWriter = new StreamWriter("client-crashlog.txt", append: true)) {
 					streamWriter.WriteLine(DateTime.Now);
 					streamWriter.WriteLine(value);
@@ -2472,6 +_,11 @@
 							worldFileData.IsHardMode = binaryReader.ReadBoolean();
 							return worldFileData;
 						}
+						else {
+							var invalid = WorldFileData.FromInvalidWorld(file, cloudSave);
+							invalid.FutureVersion = true;
+							return invalid;
+						}
 					}
 				}
 			}
@@ -2549,9 +_,10 @@
 		}
 
 		private static int SaveTileEntities(BinaryWriter writer) {
-			writer.Write(TileEntity.ByID.Count);
+			writer.Write(TileEntity.ByID.Count - ModTileEntity.CountInWorld());
 			foreach (KeyValuePair<int, TileEntity> item in TileEntity.ByID) {
+				if (item.Value.type < ModTileEntity.numVanilla)
-				TileEntity.Write(writer, item.Value);
+					TileEntity.Write(writer, item.Value);
 			}
 
 			return (int)writer.BaseStream.Position;
