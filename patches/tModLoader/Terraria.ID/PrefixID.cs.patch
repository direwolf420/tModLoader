--- src/Terraria/Terraria.ID/PrefixID.cs
+++ src/tModLoader/Terraria.ID/PrefixID.cs
@@ -1,3 +_,7 @@
+using ReLogic.Reflection;
+using System;
+using Terraria.ModLoader;
+
 namespace Terraria.ID
 {
 	public class PrefixID
@@ -86,5 +_,34 @@
 		public const int Unreal = 82;
 		public const int Mythical = 83;
 		public const int Count = 84;
+		public static readonly IdDictionary Search = IdDictionary.Create<PrefixID, int>();
+		public static string GetUniqueKey(byte type) {
+			if (type < 1 || type >= ModPrefix.PrefixCount)
+				throw new ArgumentOutOfRangeException("Invalid type: " + type);
+
+			if (type < Count)
+				return "Terraria " + Search.GetName(type);
+
+			var modPrefix = ModPrefix.GetPrefix(type);
+			return $"{modPrefix.mod.Name} {modPrefix.Name}";
+		}
+
+		public static int TypeFromUniqueKey(string key) {
+			string[] parts = key.Split(new char[] { ' ' }, 2);
+			if (parts.Length != 2)
+				return 0;
+
+			return TypeFromUniqueKey(parts[0], parts[1]);
+		}
+		public static int TypeFromUniqueKey(string mod, string name) {
+			if (mod == "Terraria") {
+				if (!Search.ContainsName(name))
+					return 0;
+
+				return Search.GetId(name);
+			}
+
+			return ModLoader.ModLoader.GetMod(mod)?.PrefixType(name) ?? 0;
+		}
 	}
 }
