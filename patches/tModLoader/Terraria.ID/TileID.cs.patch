--- src/Terraria/Terraria.ID/TileID.cs
+++ src/tModLoader/Terraria.ID/TileID.cs
@@ -1,3 +_,7 @@
+using ReLogic.Reflection;
+using System;
+using Terraria.ModLoader;
+
 namespace Terraria.ID
 {
 	public class TileID
@@ -90,6 +_,8 @@
 			public static bool[] TileInteractRead = Factory.CreateBoolSet(55, 85, 425);
 			public static bool[] HasOutlines = Factory.CreateBoolSet(10, 11, 21, 29, 55, 79, 85, 88, 97, 104, 125, 132, 136, 139, 144, 207, 209, 212, 215, 216, 237, 287, 335, 338, 354, 356, 377, 386, 387, 388, 389, 410, 411, 425, 441, 455, 463, 467, 468);
 			public static bool[] AllTiles = Factory.CreateBoolSet(true);
+			public static bool[] Stone = Factory.CreateBoolSet(1, 117, 25, 203);
+			public static bool[] Grass = Factory.CreateBoolSet(2, 23, 109, 199);
 			public static bool[] Mud = Factory.CreateBoolSet(59);
 			public static bool[] Snow = Factory.CreateBoolSet(147);
 			public static bool[] Ices = Factory.CreateBoolSet(161, 200, 163, 164);
@@ -103,6 +_,7 @@
 			public static bool[] BasicChest = Factory.CreateBoolSet(21, 467);
 			public static bool[] BasicChestFake = Factory.CreateBoolSet(441, 468);
 			public static bool[] CanBeClearedDuringGeneration = Factory.CreateBoolSet(true, 396, 400, 401, 397, 398, 399, 404, 368, 367);
+			public static bool[] CanBeClearedDuringOreRunner = Factory.CreateBoolSet(0, 1, 23, 25, 40, 53, 57, 59, 60, 70, 109, 112, 116, 117, 147, 161, 163, 164, 199, 200, 203, 234);
 			public static bool[] Corrupt = Factory.CreateBoolSet(23, 25, 112, 163, 398, 400);
 			public static bool[] Hallow = Factory.CreateBoolSet(109, 117, 116, 164, 402, 403, 115);
 			public static bool[] Crimson = Factory.CreateBoolSet(199, 203, 234, 200, 399, 401, 205);
@@ -597,5 +_,33 @@
 		public const ushort FakeContainers2 = 468;
 		public const ushort Tables2 = 469;
 		public const ushort Count = 470;
+		public static readonly IdDictionary Search = IdDictionary.Create<TileID, ushort>();
+
+		public static string GetUniqueKey(int type) {
+			if (type < 0 || type >= TileLoader.TileCount)
+				throw new ArgumentOutOfRangeException("Invalid type: " + type);
+
+			if (type < Count)
+				return "Terraria " + Search.GetName(type);
+
+			var modTile = TileLoader.GetTile(type);
+			return $"{modTile.mod.Name} {modTile.Name}";
+		}
+
+		public static int TypeFromUniqueKey(string key) {
+			string[] parts = key.Split(new char[] { ' ' }, 2);
+			if (parts.Length != 2)
+				return 0;
+
+			if (parts[0] == "Terraria") {
+				if (!Search.ContainsName(parts[1]))
+					return 0;
+
+				return Search.GetId(parts[1]);
+			}
+
+			// Should probably return -1 if not found since 0 is Dirt, but TileType also does 0.
+			return ModLoader.ModLoader.GetMod(parts[0])?.TileType(parts[1]) ?? 0;
+		}
 	}
 }
