--- src/Terraria/Terraria/Wiring.cs
+++ src/tModLoader/Terraria/Wiring.cs
@@ -6,6 +_,7 @@
 using Terraria.GameContent.UI;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -14,28 +_,28 @@
 		public static bool blockPlayerTeleportationForOneIteration;
 		public static bool running;
 		private static Dictionary<Point16, bool> _wireSkip;
-		private static DoubleStack<Point16> _wireList;
+		public static DoubleStack<Point16> _wireList;
-		private static DoubleStack<byte> _wireDirectionList;
+		public static DoubleStack<byte> _wireDirectionList;
-		private static Dictionary<Point16, byte> _toProcess;
+		public static Dictionary<Point16, byte> _toProcess;
 		private static Queue<Point16> _GatesCurrent;
-		private static Queue<Point16> _LampsToCheck;
+		public static Queue<Point16> _LampsToCheck;
-		private static Queue<Point16> _GatesNext;
+		public static Queue<Point16> _GatesNext;
 		private static Dictionary<Point16, bool> _GatesDone;
 		private static Dictionary<Point16, byte> _PixelBoxTriggers;
-		private static Vector2[] _teleport;
 		private const int MaxPump = 20;
+		public static Vector2[] _teleport;
-		private static int[] _inPumpX;
+		public static int[] _inPumpX;
-		private static int[] _inPumpY;
+		public static int[] _inPumpY;
-		private static int _numInPump;
+		public static int _numInPump;
-		private static int[] _outPumpX;
+		public static int[] _outPumpX;
-		private static int[] _outPumpY;
+		public static int[] _outPumpY;
-		private static int _numOutPump;
 		private const int MaxMech = 1000;
+		public static int _numOutPump;
 		private static int[] _mechX;
 		private static int[] _mechY;
 		private static int _numMechs;
 		private static int[] _mechTime;
-		private static int _currentWireColor;
+		public static int _currentWireColor;
 		private static int CurrentUser = 254;
 
 		public static void SetCurrentUser(int plr = -1) {
@@ -280,7 +_,7 @@
 			}
 		}
 
-		private static bool CheckMech(int i, int j, int time) {
+		public static bool CheckMech(int i, int j, int time) {
 			for (int k = 0; k < _numMechs; k++) {
 				if (_mechX[k] == i && _mechY[k] == j)
 					return false;
@@ -344,7 +_,7 @@
 			}
 		}
 
-		private static void TripWire(int left, int top, int width, int height) {
+		public static void TripWire(int left, int top, int width, int height) {
 			if (Main.netMode == 1)
 				return;
 
@@ -765,6 +_,9 @@
 			if (!tile.active())
 				return;
 
+			if (!TileLoader.PreHitWire(i, j, type))
+				return;
+
 			switch (type) {
 				case 144:
 					HitSwitch(i, j);
@@ -1111,11 +_,11 @@
 						NetMessage.SendData(19, -1, -1, null, 4 + flag11.ToInt(), i, j);
 						break;
 					}
-				case 11:
+				case int _ when TileLoader.CloseDoorID(Main.tile[i, j]) >= 0:
 					if (WorldGen.CloseDoor(i, j, forced: true))
 						NetMessage.SendData(19, -1, -1, null, 1, i, j);
 					break;
-				case 10: {
+				case int _ when TileLoader.OpenDoorID(Main.tile[i, j]) >= 0: {
 						int num73 = 1;
 						if (Main.rand.Next(2) == 0)
 							num73 = -1;
@@ -1187,7 +_,7 @@
 
 						break;
 					}
-				case 4:
+				case int _ when TileLoader.IsTorch(type):
 					if (tile.frameX < 66)
 						tile.frameX += 66;
 					else
@@ -1603,6 +_,7 @@
 					}
 				case 35:
 				case 139:
+				case int _ when TileLoader.IsModMusicBox(tile):
 					WorldGen.SwitchMB(i, j);
 					break;
 				case 207:
@@ -1934,14 +_,13 @@
 										if (!CheckMech(num53, num52, 300))
 											break;
 
-										int[] array2 = new int[10];
+										List<int> array2 = new List<int>();
 										int num64 = 0;
 										for (int num65 = 0; num65 < 200; num65++) {
-											if (Main.npc[num65].active && (Main.npc[num65].type == 17 || Main.npc[num65].type == 19 || Main.npc[num65].type == 22 || Main.npc[num65].type == 38 || Main.npc[num65].type == 54 || Main.npc[num65].type == 107 || Main.npc[num65].type == 108 || Main.npc[num65].type == 142 || Main.npc[num65].type == 160 || Main.npc[num65].type == 207 || Main.npc[num65].type == 209 || Main.npc[num65].type == 227 || Main.npc[num65].type == 228 || Main.npc[num65].type == 229 || Main.npc[num65].type == 358 || Main.npc[num65].type == 369 || Main.npc[num65].type == 550)) {
-												array2[num64] = num65;
+											bool vanillaCanGo = (Main.npc[num65].type == 17 || Main.npc[num65].type == 19 || Main.npc[num65].type == 22 || Main.npc[num65].type == 38 || Main.npc[num65].type == 54 || Main.npc[num65].type == 107 || Main.npc[num65].type == 108 || Main.npc[num65].type == 142 || Main.npc[num65].type == 160 || Main.npc[num65].type == 207 || Main.npc[num65].type == 209 || Main.npc[num65].type == 227 || Main.npc[num65].type == 228 || Main.npc[num65].type == 229 || Main.npc[num65].type == 358 || Main.npc[num65].type == 369 || Main.npc[num65].type == 550);
+											if (Main.npc[num65].active && NPCLoader.CanGoToStatue(Main.npc[num65], true, vanillaCanGo)) {
+												array2.Add(num65);
 												num64++;
-												if (num64 >= 9)
-													break;
 											}
 										}
 
@@ -1950,6 +_,7 @@
 											Main.npc[num66].position.X = num55 - Main.npc[num66].width / 2;
 											Main.npc[num66].position.Y = num56 - Main.npc[num66].height - 1;
 											NetMessage.SendData(23, -1, -1, null, num66);
+											NPCLoader.OnGoToStatue(Main.npc[num66], true);
 										}
 
 										break;
@@ -1958,14 +_,13 @@
 										if (!CheckMech(num53, num52, 300))
 											break;
 
-										int[] array = new int[10];
+										List<int> array = new List<int>();
 										int num59 = 0;
 										for (int num60 = 0; num60 < 200; num60++) {
-											if (Main.npc[num60].active && (Main.npc[num60].type == 18 || Main.npc[num60].type == 20 || Main.npc[num60].type == 124 || Main.npc[num60].type == 178 || Main.npc[num60].type == 208 || Main.npc[num60].type == 353)) {
-												array[num59] = num60;
+											bool vanillaCanGo = (Main.npc[num60].type == 18 || Main.npc[num60].type == 20 || Main.npc[num60].type == 124 || Main.npc[num60].type == 178 || Main.npc[num60].type == 208 || Main.npc[num60].type == 353);
+											if (Main.npc[num60].active && NPCLoader.CanGoToStatue(Main.npc[num60], false, vanillaCanGo)) {
+												array.Add(num60);
 												num59++;
-												if (num59 >= 9)
-													break;
 											}
 										}
 
@@ -1974,6 +_,7 @@
 											Main.npc[num61].position.X = num55 - Main.npc[num61].width / 2;
 											Main.npc[num61].position.Y = num56 - Main.npc[num61].height - 1;
 											NetMessage.SendData(23, -1, -1, null, num61);
+											NPCLoader.OnGoToStatue(Main.npc[num61], false);
 										}
 
 										break;
@@ -2016,6 +_,7 @@
 						break;
 					}
 			}
+			TileLoader.HitWire(i, j, type);
 		}
 
 		private static void Teleport() {
@@ -2071,7 +_,7 @@
 			}
 		}
 
-		private static void DeActive(int i, int j) {
+		public static void DeActive(int i, int j) {
 			if (!Main.tile[i, j].active())
 				return;
 
@@ -2088,7 +_,7 @@
 			}
 		}
 
-		private static void ReActive(int i, int j) {
+		public static void ReActive(int i, int j) {
 			Main.tile[i, j].inActive(inActive: false);
 			WorldGen.SquareTileFrame(i, j, resetFrame: false);
 			if (Main.netMode != 1)
