--- src/Terraria/Terraria/Tile.cs
+++ src/tModLoader/Terraria/Tile.cs
@@ -9,9 +_,10 @@
 	public class Tile
 	{
 		public ushort type;
-		public byte wall;
+		public ushort wall;
 		public byte liquid;
+		// bitwise manipulations on signed values in C# apparently doesn't follow the C standards so the one unused bit in sTileHeader would have to have a unique way to access it.
-		public short sTileHeader;
+		public ushort sTileHeader;
 		public byte bTileHeader;
 		public byte bTileHeader2;
 		public byte bTileHeader3;
@@ -326,7 +_,7 @@
 			if (color > 30)
 				color = 30;
 
-			sTileHeader = (short)((sTileHeader & 0xFFE0) | color);
+			sTileHeader = (ushort)((sTileHeader & 0xFFE0) | color);
 		}
 
 		public bool active() => (sTileHeader & 0x20) == 32;
@@ -335,7 +_,7 @@
 			if (active)
 				sTileHeader |= 32;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFFDF);
+				sTileHeader = (ushort)(sTileHeader & 0xFFDF);
 		}
 
 		public bool inActive() => (sTileHeader & 0x40) == 64;
@@ -344,7 +_,7 @@
 			if (inActive)
 				sTileHeader |= 64;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFFBF);
+				sTileHeader = (ushort)(sTileHeader & 0xFFBF);
 		}
 
 		public bool wire() => (sTileHeader & 0x80) == 128;
@@ -353,7 +_,7 @@
 			if (wire)
 				sTileHeader |= 128;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFF7F);
+				sTileHeader = (ushort)(sTileHeader & 0xFF7F);
 		}
 
 		public bool wire2() => (sTileHeader & 0x100) == 256;
@@ -362,7 +_,7 @@
 			if (wire2)
 				sTileHeader |= 256;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFEFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFEFF);
 		}
 
 		public bool wire3() => (sTileHeader & 0x200) == 512;
@@ -371,7 +_,7 @@
 			if (wire3)
 				sTileHeader |= 512;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFDFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFDFF);
 		}
 
 		public bool halfBrick() => (sTileHeader & 0x400) == 1024;
@@ -380,7 +_,7 @@
 			if (halfBrick)
 				sTileHeader |= 1024;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFBFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFBFF);
 		}
 
 		public bool actuator() => (sTileHeader & 0x800) == 2048;
@@ -389,13 +_,13 @@
 			if (actuator)
 				sTileHeader |= 2048;
 			else
-				sTileHeader = (short)(sTileHeader & 0xF7FF);
+				sTileHeader = (ushort)(sTileHeader & 0xF7FF);
 		}
 
 		public byte slope() => (byte)((sTileHeader & 0x7000) >> 12);
 
 		public void slope(byte slope) {
-			sTileHeader = (short)((sTileHeader & 0x8FFF) | ((slope & 7) << 12));
+			sTileHeader = (ushort)((sTileHeader & 0x8FFF) | ((slope & 7) << 12));
 		}
 
 		public static void SmoothSlope(int x, int y, bool applyToNeighbors = true) {
