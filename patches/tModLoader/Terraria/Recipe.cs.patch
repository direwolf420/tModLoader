--- src/Terraria/Terraria/Recipe.cs
+++ src/tModLoader/Terraria/Recipe.cs
@@ -1,6 +_,7 @@
 using System.Collections.Generic;
 using Terraria.GameContent.Achievements;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -32,7 +_,7 @@
 
 		public bool ProcessGroupsForText(int type, out string theText) {
 			foreach (int acceptedGroup in acceptedGroups) {
-				if (RecipeGroup.recipeGroups[acceptedGroup].ValidItems.Contains(type)) {
+				if (RecipeGroup.recipeGroups[acceptedGroup].ContainsItem(type)) {
 					theText = RecipeGroup.recipeGroups[acceptedGroup].GetText();
 					return true;
 				}
@@ -44,7 +_,7 @@
 
 		public bool AcceptedByItemGroups(int invType, int reqType) {
 			foreach (int acceptedGroup in acceptedGroups) {
-				if (RecipeGroup.recipeGroups[acceptedGroup].ValidItems.Contains(invType) && RecipeGroup.recipeGroups[acceptedGroup].ValidItems.Contains(reqType))
+				if (RecipeGroup.recipeGroups[acceptedGroup].ContainsItem(invType) && RecipeGroup.recipeGroups[acceptedGroup].ContainsItem(reqType))
 					return true;
 			}
 
@@ -68,6 +_,10 @@
 					break;
 
 				int num = item2.stack;
+				ModRecipe modRecipe = this as ModRecipe;
+				if (modRecipe != null)
+					num = modRecipe.ConsumeItem(item2.type, item2.stack);
+
 				if (alchemy && Main.player[Main.myPlayer].alchemyTable) {
 					if (num > 1) {
 						int num2 = 0;
@@ -146,6 +_,9 @@
 		}
 
 		public bool useWood(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Wood];
+			return anyWood && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyWood)
 				return false;
 
@@ -174,9 +_,13 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public bool useIronBar(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.IronBar];
+			return this.anyIronBar && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyIronBar)
 				return false;
 
@@ -187,9 +_,13 @@
 				return false;
 
 			return true;
+			*/
 		}
 
 		public bool useSand(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Sand];
+			return this.anySand && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 169 && reqType != 408 && reqType != 1246 && reqType != 370 && reqType != 3272)
 				return false;
 
@@ -197,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool useFragment(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Fragment];
+			return this.anyFragment && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 3458 && reqType != 3456 && reqType != 3457 && reqType != 3459)
 				return false;
 
@@ -207,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool usePressurePlate(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.PressurePlate];
+			return anyPressurePlate && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyPressurePlate)
 				return false;
 
@@ -236,6 +_,7 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public static void FindRecipes() {
@@ -338,7 +_,7 @@
 							flag = false;
 					}
 
-					if (flag) {
+					if (flag && RecipeHooks.RecipeAvailable(Main.recipe[n])) {
 						Main.availableRecipe[Main.numAvailableRecipes] = n;
 						Main.numAvailableRecipes++;
 					}
@@ -381,6 +_,8 @@
 			RecipeGroupID.Fireflies = RecipeGroup.RegisterGroup("Fireflies", rec);
 			rec = new RecipeGroup(() => Lang.misc[37].Value + " " + Lang.misc[95].Value, 2006, 2007);
 			RecipeGroupID.Snails = RecipeGroup.RegisterGroup("Snails", rec);
+			RecipeGroupHelper.AddOldVanillaGroups();
+			RecipeGroupHelper.AddRecipeGroups();
 		}
 
 		public static void SetupRecipes() {
@@ -10738,6 +_,9 @@
 			AddRecipe();
 			WallReturn();
 			PlatformReturn();
+			RecipeHooks.AddRecipes();
+			RecipeHooks.PostAddRecipes();
+			Item.PopulateMaterialCache();
 			for (int num9 = 0; num9 < numRecipes; num9++) {
 				for (int num10 = 0; Main.recipe[num9].requiredItem[num10].type > 0; num10++) {
 					Main.recipe[num9].requiredItem[num10].checkMat();
