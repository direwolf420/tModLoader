--- src/Terraria/Terraria/Lighting.cs
+++ src/tModLoader/Terraria/Lighting.cs
@@ -8,6 +_,7 @@
 using Terraria.Graphics;
 using Terraria.ID;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -112,7 +_,7 @@
 		private static int firstToLightY;
 		private static int lastToLightX;
 		private static int lastToLightY;
-		private static float negLight = 0.04f;
+		internal static float negLight = 0.04f;
 		private static float negLight2 = 0.16f;
 		private static float wetLightR = 0.16f;
 		private static float wetLightG = 0.16f;
@@ -120,7 +_,7 @@
 		private static float honeyLightR = 0.16f;
 		private static float honeyLightG = 0.16f;
 		private static float honeyLightB = 0.16f;
-		private static float blueWave = 1f;
+		internal static float blueWave = 1f;
 		private static int blueDir = 1;
 		private static int minX7;
 		private static int maxX7;
@@ -513,6 +_,7 @@
 			}
 
 			Main.player[Main.myPlayer].hasBanner = false;
+			WorldHooks.ResetNearbyTileEffects();
 			int[] screenTileCounts = Main.screenTileCounts;
 			Array.Clear(screenTileCounts, 0, screenTileCounts.Length);
 			num4 = Utils.Clamp(firstToLightX, 5, Main.maxTilesX - 1);
@@ -525,6 +_,7 @@
 			Main.monolithType = -1;
 			for (int n = num4; n < num5; n++) {
 				LightingState[] array3 = states[n - firstToLightX];
+				//patch file: n, num17
 				for (int num17 = num6; num17 < num7; num17++) {
 					LightingState lightingState2 = array3[num17 - firstToLightY];
 					Tile tile = Main.tile[n, num17];
@@ -737,7 +_,9 @@
 							break;
 					}
 
+					WallLoader.ModifyLight(n, num17, tile.wall, ref num18, ref num19, ref num20);
 					if (tile.active()) {
+						bool closer = false;
 						if (n > num4 + num15 && n < num5 - num15 && num17 > num6 + num16 && num17 < num7 - num16) {
 							screenTileCounts[tile.type]++;
 							if (tile.type == 215 && tile.frameY < 36)
@@ -765,6 +_,8 @@
 									Main.player[Main.myPlayer].hasBanner = true;
 								}
 							}
+
+							closer = true;
 						}
 
 						switch (tile.type) {
@@ -811,6 +_,10 @@
 								break;
 						}
 
+						if (TileLoader.IsModMusicBox(tile) && tile.frameX >= 36)
+							Main.musicBox = SoundLoader.tileToMusic[tile.type][tile.frameY / 36 * 36];
+
+						TileLoader.NearbyEffects(n, num17, tile.type, closer);
 						if (Main.tileBlockLight[tile.type] && (lightMode >= 2 || (tile.type != 131 && !tile.inActive() && tile.slope() == 0)))
 							lightingState2.stopLight = true;
 
@@ -1967,13 +_,17 @@
 						}
 					}
 
+					TileLoader.ModifyLight(n, num17, tile.type, ref num18, ref num19, ref num20);
+
 					if (RGB) {
 						if (lightingState2.r2 < num18)
 							lightingState2.r2 = num18;
 
+						//patch file: num18, num19
 						if (lightingState2.g2 < num19)
 							lightingState2.g2 = num19;
 
+						//patch file: num19, num20
 						if (lightingState2.b2 < num20)
 							lightingState2.b2 = num20;
 					}
@@ -2076,12 +_,13 @@
 			Main.partyMonoliths = screenTileCounts[455];
 			if (Main.player[Main.myPlayer].accOreFinder) {
 				Main.player[Main.myPlayer].bestOre = -1;
-				for (int num58 = 0; num58 < 470; num58++) {
+				for (int num58 = 0; num58 < Main.tileValue.Length; num58++) {
 					if (screenTileCounts[num58] > 0 && Main.tileValue[num58] > 0 && (Main.player[Main.myPlayer].bestOre < 0 || Main.tileValue[num58] > Main.tileValue[Main.player[Main.myPlayer].bestOre]))
 						Main.player[Main.myPlayer].bestOre = num58;
 				}
 			}
 
+			WorldHooks.TileCountsAvailable(screenTileCounts);
 			if (Main.holyTiles < 0)
 				Main.holyTiles = 0;
 
@@ -2200,6 +_,8 @@
 							wetLightB = 0f;
 							break;
 					}
+
+					WaterStyleLoader.LightColorMultiplier(Main.waterStyle, ref wetLightR, ref wetLightG, ref wetLightB);
 				}
 				else {
 					negLight = 0.9f;
@@ -2226,6 +_,8 @@
 					negLight *= 0.85f;
 					negLight2 *= 0.85f;
 				}
+
+				ModHooks.ModifyLightingBrightness(ref negLight, ref negLight2);
 			}
 			else {
 				negLight = 0.04f;
@@ -2250,6 +_,7 @@
 					negLight2 += 0.18f;
 				}
 
+				ModHooks.ModifyLightingBrightness(ref negLight, ref negLight2);
 				wetLightR = negLight * 1.2f;
 				wetLightG = negLight * 1.1f;
 			}
