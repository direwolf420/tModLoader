--- src/Terraria/Terraria/MessageBuffer.cs
+++ src/tModLoader/Terraria/MessageBuffer.cs
@@ -14,6 +_,9 @@
 using Terraria.Localization;
 using Terraria.Net;
 using Terraria.UI;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Exceptions;
+using Terraria.ModLoader.IO;
 
 namespace Terraria
 {
@@ -77,13 +_,13 @@
 			int num = 0;
 			num = start + 1;
 			b = (byte)(messageType = readBuffer[start]);
-			if (b >= 120)
-				return;
-
 			Main.rxMsg++;
 			Main.rxData += length;
+			if (b < Main.maxMsg) {
-			Main.rxMsgType[b]++;
+				Main.rxMsgType[b]++;
-			Main.rxDataType[b] += length;
+				Main.rxDataType[b] += length;
+			}
+
 			if (Main.netMode == 1 && Netplay.Connection.StatusMax > 0)
 				Netplay.Connection.StatusCount++;
 
@@ -101,13 +_,16 @@
 				return;
 			}
 
-			if (Main.netMode == 2 && Netplay.Clients[whoAmI].State < 10 && b > 12 && b != 93 && b != 16 && b != 42 && b != 50 && b != 38 && b != 68)
+			if (Main.netMode == 2 && Netplay.Clients[whoAmI].State < 10 && b > 12 && b != 93 && b != 16 && b != 42 && b != 50 && b != 38 && b != 68 && b < 250)
 				NetMessage.BootPlayer(whoAmI, Lang.mp[2].ToNetworkText());
 
 			if (reader == null)
 				ResetReader();
 
 			reader.BaseStream.Position = num;
+			if (ModNet.HijackGetData(ref b, ref reader, whoAmI))
+				return;
+
 			switch (b) {
 				case 15:
 				case 25:
@@ -127,9 +_,15 @@
 						if (Netplay.Clients[whoAmI].State != 0)
 							break;
 
-						if (reader.ReadString() == "Terraria" + 194) {
+						string clientVersion = reader.ReadString();
+						ModNet.isModdedClient[whoAmI] = clientVersion == ModLoader.ModLoader.versionedName;
+						if (ModNet.isModdedClient[whoAmI] || clientVersion == "Terraria" + 194 && ModNet.AllowVanillaClients) {
 							if (string.IsNullOrEmpty(Netplay.ServerPassword)) {
 								Netplay.Clients[whoAmI].State = 1;
+								if (ModNet.isModdedClient[whoAmI]) {
+									ModNet.SyncMods(whoAmI);
+									return;
+								}
 								NetMessage.SendData(3, whoAmI);
 							}
 							else {
@@ -138,7 +_,10 @@
 							}
 						}
 						else {
-							NetMessage.SendData(2, whoAmI, -1, Lang.mp[4].ToNetworkText());
+							if (clientVersion.StartsWith("tModLoader"))
+								NetMessage.SendData(2, whoAmI, -1, NetworkText.FromLiteral(Lang.mp[4].Value + $"\n(You are on {clientVersion}, server is on {ModLoader.ModLoader.versionedName})"));
+							else
+								NetMessage.SendData(2, whoAmI, -1, NetworkText.FromLiteral(Lang.mp[4].Value + "\n(You cannot connect to a tModLoader Server with an unmodded client.)"));
 						}
 					}
 					break;
@@ -200,6 +_,7 @@
 							NetMessage.SendData(5, -1, -1, null, num127, 58 + player12.armor.Length + player12.dye.Length + player12.miscEquips.Length + player12.miscDyes.Length + player12.bank.item.Length + player12.bank2.item.Length + 2 + num135, (int)player12.bank3.item[num135].prefix);
 						}
 
+						PlayerHooks.SyncPlayer(player12, -1, -1, true);
 						NetMessage.SendData(6);
 						if (Netplay.Connection.State == 2)
 							Netplay.Connection.State = 3;
@@ -339,6 +_,7 @@
 								player2.trashItem.netDefaults(type3);
 								player2.trashItem.stack = stack;
 								player2.trashItem.Prefix(num45);
+								ItemIO.ReceiveModData(player2.trashItem, reader);
 							}
 							else if (num44 <= 58) {
 								int type4 = array[num46].type;
@@ -347,6 +_,7 @@
 								array[num46].netDefaults(type3);
 								array[num46].stack = stack;
 								array[num46].Prefix(num45);
+								ItemIO.ReceiveModData(array[num46], reader);
 								if (num43 == Main.myPlayer && num46 == 58)
 									Main.mouseItem = array[num46].Clone();
 
@@ -363,6 +_,7 @@
 								array[num46].netDefaults(type3);
 								array[num46].stack = stack;
 								array[num46].Prefix(num45);
+								ItemIO.ReceiveModData(array[num46], reader);
 							}
 
 							if (Main.netMode == 2 && num43 == whoAmI && num44 <= 58 + player2.armor.Length + player2.dye.Length + player2.miscEquips.Length + player2.miscDyes.Length)
@@ -482,8 +_,11 @@
 							Main.StopSlimeRain();
 
 						Main.invasionType = reader.ReadSByte();
+
 						Main.LobbyId = reader.ReadUInt64();
 						Sandstorm.IntendedSeverity = reader.ReadSingle();
+						if (!ModNet.AllowVanillaClients && Netplay.Connection.State > 4)
+							WorldIO.ReceiveModData(reader);
 						if (Netplay.Connection.State == 3)
 							Netplay.Connection.State = 4;
 					}
@@ -610,6 +_,9 @@
 							NetMessage.SendData(83, whoAmI, -1, null, num192);
 						}
 
+						for (int type = NPCID.Count; type < NPCLoader.NPCCount; type++)
+							NetMessage.SendData(83, whoAmI, -1, null, type, 0f, 0f, 0f, 0, 0, 0);
+
 						NetMessage.SendData(49, whoAmI);
 						NetMessage.SendData(57, whoAmI);
 						NetMessage.SendData(7, whoAmI);
@@ -965,7 +_,7 @@
 
 								tile4.wire4(bitsByte11[7]);
 								if (tile4.wall > 0)
-									tile4.wall = reader.ReadByte();
+									tile4.wall = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 
 								if (flag6) {
 									tile4.liquid = reader.ReadByte();
@@ -997,7 +_,7 @@
 
 							int num220 = num217;
 							Item item2 = Main.item[num220];
-							bool newAndShiny = (item2.newAndShiny || item2.netID != num219) && ItemSlot.Options.HighlightNewItems && (num219 < 0 || num219 >= 3930 || !ItemID.Sets.NeverShiny[num219]);
+							bool newAndShiny = (item2.newAndShiny || item2.netID != num219) && ItemSlot.Options.HighlightNewItems && (num219 < 0 || !ItemID.Sets.NeverShiny[num219]);
 							item2.netDefaults(num219);
 							item2.newAndShiny = newAndShiny;
 							item2.Prefix(pre3);
@@ -1005,6 +_,7 @@
 							item2.position = position3;
 							item2.velocity = velocity5;
 							item2.active = true;
+							ItemIO.ReceiveModData(item2, reader);
 							if (b == 90) {
 								item2.instanced = true;
 								item2.owner = Main.myPlayer;
@@ -1043,6 +_,7 @@
 							obj6.position = position3;
 							obj6.velocity = velocity5;
 							obj6.active = true;
+							ItemIO.ReceiveModData(obj6, reader);
 							obj6.owner = Main.myPlayer;
 							if (flag9) {
 								NetMessage.SendData(21, -1, -1, null, num217);
@@ -1155,9 +_,10 @@
 						if (num110 == 245)
 							NPC.golemBoss = num107;
 
-						if (nPC.type >= 0 && nPC.type < 580 && Main.npcCatchable[nPC.type])
+						if (nPC.type >= 0 && nPC.type < NPCLoader.NPCCount && Main.npcCatchable[nPC.type])
 							nPC.releaseOwner = reader.ReadByte();
 
+						NPCLoader.ReceiveExtraAI(nPC, reader);
 						break;
 					}
 				case 24: {
@@ -1185,6 +_,7 @@
 						int num81 = reader.ReadInt16();
 						BitsByte bitsByte9 = reader.ReadByte();
 						float[] array2 = new float[Projectile.maxAI];
+						//patch file: bitsByte9
 						for (int num82 = 0; num82 < Projectile.maxAI; num82++) {
 							if (bitsByte9[num82])
 								array2[num82] = reader.ReadSingle();
@@ -1196,6 +_,7 @@
 						if (num83 >= 1000)
 							num83 = -1;
 
+						byte[] extraAI = ProjectileLoader.ReadExtraAI(reader, bitsByte9);
 						if (Main.netMode == 2) {
 							num80 = whoAmI;
 							if (Main.projHostile[num81])
@@ -1242,6 +_,7 @@
 							Main.projectileIdentity[num80, num83] = num84;
 						}
 
+						ProjectileLoader.ReceiveExtraAI(projectile, extraAI);
 						projectile.ProjectileFixDesperation();
 						if (Main.netMode == 2)
 							NetMessage.SendData(27, -1, whoAmI, null, num84);
@@ -1250,7 +_,7 @@
 					}
 				case 28: {
 						int num161 = reader.ReadInt16();
-						int num162 = reader.ReadInt16();
+						int num162 = ModNet.AllowVanillaClients ? reader.ReadInt16() : reader.ReadInt32();
 						float num163 = reader.ReadSingle();
 						int num164 = reader.ReadByte() - 1;
 						byte b14 = reader.ReadByte();
@@ -1330,7 +_,7 @@
 						int num10 = Chest.FindChest(x2, y2);
 						if (num10 > -1 && Chest.UsingChest(num10) == -1) {
 							for (int l = 0; l < 40; l++) {
-								NetMessage.SendData(32, whoAmI, -1, null, num10, l);
+								NetMessage.SendData(32, whoAmI, -1, null, num10, l, 1); //New, the 1 indicates the item is synced synced within RequestChestOpen
 							}
 
 							NetMessage.SendData(33, whoAmI, -1, null, num10);
@@ -1346,6 +_,7 @@
 				case 32: {
 						int num215 = reader.ReadInt16();
 						int num216 = reader.ReadByte();
+						bool skipRecipes = !ModNet.AllowVanillaClients && reader.ReadBoolean(); // New, third parameter, sent as '(bool)(number3 == 1)', 1 meaning the item is synced within RequestChestOpen
 						int stack4 = reader.ReadInt16();
 						int pre2 = reader.ReadByte();
 						int type14 = reader.ReadInt16();
@@ -1358,7 +_,13 @@
 						Main.chest[num215].item[num216].netDefaults(type14);
 						Main.chest[num215].item[num216].Prefix(pre2);
 						Main.chest[num215].item[num216].stack = stack4;
+						ItemIO.ReceiveModData(Main.chest[num215].item[num216], reader);
+						if (!skipRecipes)
-						Recipe.FindRecipes();
+							Recipe.FindRecipes();
+						// New, skips FindRecipes if item is synced within RequestChestOpen.
+						// Note that in this case, SyncPlayerChestIndex (80), which is sent at the end of RequestChestOpen,
+						// calls FindRecipes for the current chest, so the client is still aware of new recipes.
+						// In 1.4, the commit adding this patch is redundant because it uses a param called canDelayCheck for FindRecipes, fixing the same problem as this commit
 						break;
 					}
 				case 33: {
@@ -1413,6 +_,7 @@
 						break;
 					}
 				case 34: {
+						// TODO, check that this didn't get messed up...why % 100?
 						byte b2 = reader.ReadByte();
 						int num19 = reader.ReadInt16();
 						int num20 = reader.ReadInt16();
@@ -1421,22 +_,32 @@
 						if (Main.netMode == 2)
 							num22 = 0;
 
+
+						ushort modType = 0;
+						if (b2 >= 100)
+							modType = reader.ReadUInt16();
+
 						if (Main.netMode == 2) {
 							switch (b2) {
-								case 0: {
-										int num23 = WorldGen.PlaceChest(num19, num20, 21, notNearOtherChests: false, num21);
+								case byte _ when b2 % 100 == 0: {
+										if (modType == 0)
+											modType = TileID.Containers;
+
+										int num23 = WorldGen.PlaceChest(num19, num20, modType, notNearOtherChests: false, num21);
 										if (num23 == -1) {
-											NetMessage.SendData(34, whoAmI, -1, null, b2, num19, num20, num21, num23);
-											Item.NewItem(num19 * 16, num20 * 16, 32, 32, Chest.chestItemSpawn[num21], 1, noBroadcast: true);
+											NetMessage.SendData(34, whoAmI, -1, null, b2, num19, num20, num21, num23, modType);
+											int itemSpawn = b2 < 100 ? Chest.chestItemSpawn[num21] : TileLoader.GetTile(modType).chestDrop;
+											if (itemSpawn > 0)
+												Item.NewItem(num19 * 16, num20 * 16, 32, 32, itemSpawn, 1, noBroadcast: true);
 										}
 										else {
-											NetMessage.SendData(34, -1, -1, null, b2, num19, num20, num21, num23);
+											NetMessage.SendData(34, -1, -1, null, b2, num19, num20, num21, num23, modType);
 										}
 
 										return;
 									}
-								case 1:
-									if (Main.tile[num19, num20].type == 21) {
+								case byte _ when b2 % 100 == 1:
+									if (Main.tile[num19, num20].type == 21 || b2 == 101 && TileID.Sets.BasicChest[Main.tile[num19, num20].type]) {
 										Tile tile = Main.tile[num19, num20];
 										if (tile.frameX % 36 != 0)
 											num19--;
@@ -1455,20 +_,25 @@
 							}
 
 							switch (b2) {
-								case 2: {
-										int num24 = WorldGen.PlaceChest(num19, num20, 88, notNearOtherChests: false, num21);
+								case byte _ when b2 % 100 == 2: {
+										if (modType == 0)
+											modType = TileID.Dressers;
+
+										int num24 = WorldGen.PlaceChest(num19, num20, modType, notNearOtherChests: false, num21);
 										if (num24 == -1) {
-											NetMessage.SendData(34, whoAmI, -1, null, b2, num19, num20, num21, num24);
-											Item.NewItem(num19 * 16, num20 * 16, 32, 32, Chest.dresserItemSpawn[num21], 1, noBroadcast: true);
+											NetMessage.SendData(34, whoAmI, -1, null, b2, num19, num20, num21, num24, modType);
+											int itemSpawn = b2 < 100 ? Chest.dresserItemSpawn[num21] : TileLoader.GetTile(modType).dresserDrop;
+											if (itemSpawn > 0)
+												Item.NewItem(num19 * 16, num20 * 16, 32, 32, itemSpawn, 1, noBroadcast: true);
 										}
 										else {
-											NetMessage.SendData(34, -1, -1, null, b2, num19, num20, num21, num24);
+											NetMessage.SendData(34, -1, -1, null, b2, num19, num20, num21, num24, modType);
 										}
 
 										return;
 									}
-								case 3:
-									if (Main.tile[num19, num20].type == 88) {
+								case byte _ when b2 % 100 == 3:
+									if (Main.tile[num19, num20].type == 88 || b2 == 103 && TileLoader.IsDresser(Main.tile[num19, num20].type)) {
 										Tile tile2 = Main.tile[num19, num20];
 										num19 -= tile2.frameX % 54 / 18;
 										if (tile2.frameY % 36 != 0)
@@ -1518,17 +_,27 @@
 						}
 
 						switch (b2) {
-							case 0:
+							case byte _ when b2 % 100 == 0:
 								if (num22 == -1)
 									WorldGen.KillTile(num19, num20);
 								else
+								{
+									if (modType == 0)
+										modType = TileID.Containers;
+
-									WorldGen.PlaceChestDirect(num19, num20, 21, num21, num22);
+									WorldGen.PlaceChestDirect(num19, num20, modType, num21, num22);
+								}
 								break;
-							case 2:
+							case byte _ when b2 % 100 == 2:
 								if (num22 == -1)
 									WorldGen.KillTile(num19, num20);
 								else
+								{
+									if (modType == 0)
+										modType = TileID.Dressers;
+
-									WorldGen.PlaceDresserDirect(num19, num20, 88, num21, num22);
+									WorldGen.PlaceDresserDirect(num19, num20, modType, num21, num22);
+								}
 								break;
 							case 4:
 								if (num22 == -1)
@@ -1568,6 +_,9 @@
 						obj5.zone2 = reader.ReadByte();
 						obj5.zone3 = reader.ReadByte();
 						obj5.zone4 = reader.ReadByte();
+						if (!ModNet.AllowVanillaClients)
+							PlayerHooks.ReceiveCustomBiomes(obj5, reader);
+
 						if (Main.netMode == 2)
 							NetMessage.SendData(36, -1, whoAmI, null, num195);
 
@@ -1589,6 +_,11 @@
 					if (Main.netMode == 2) {
 						if (reader.ReadString() == Netplay.ServerPassword) {
 							Netplay.Clients[whoAmI].State = 1;
+							if (ModNet.isModdedClient[whoAmI]) {
+								ModNet.SyncMods(whoAmI);
+								return;
+							}
+
 							NetMessage.SendData(3, whoAmI);
 						}
 						else {
@@ -1771,8 +_,8 @@
 							break;
 
 						Player player4 = Main.player[num50];
-						for (int num51 = 0; num51 < 22; num51++) {
-							player4.buffType[num51] = reader.ReadByte();
+						for (int num51 = 0; num51 < Player.MaxBuffs; num51++) {
+							player4.buffType[num51] = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 							if (player4.buffType[num51] > 0)
 								player4.buffTime[num51] = 60;
 							else
@@ -1832,7 +_,7 @@
 					}
 				case 53: {
 						int num18 = reader.ReadInt16();
-						int type2 = reader.ReadByte();
+						int type2 = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 						int time = reader.ReadInt16();
 						Main.npc[num18].AddBuff(type2, time, quiet: true);
 						if (Main.netMode == 2)
@@ -1845,14 +_,14 @@
 						int num225 = reader.ReadInt16();
 						NPC nPC2 = Main.npc[num225];
 						for (int num226 = 0; num226 < 5; num226++) {
-							nPC2.buffType[num226] = reader.ReadByte();
+							nPC2.buffType[num226] = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 							nPC2.buffTime[num226] = reader.ReadInt16();
 						}
 					}
 					break;
 				case 55: {
 						int num206 = reader.ReadByte();
-						int num207 = reader.ReadByte();
+						int num207 = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 						int num208 = reader.ReadInt32();
 						if (Main.netMode != 2 || num206 == whoAmI || Main.pvpBuff[num207]) {
 							if (Main.netMode == 1 && num206 == Main.myPlayer)
@@ -2189,6 +_,7 @@
 					break;
 				case 74:
 					if (Main.netMode == 1) {
+						Netplay.syncingWorld = false;
 						Main.anglerQuest = reader.ReadByte();
 						Main.anglerQuestFinished = reader.ReadBoolean();
 					}
@@ -2276,7 +_,7 @@
 					if (Main.netMode == 1) {
 						int num141 = reader.ReadInt16();
 						int num142 = reader.ReadInt32();
-						if (num141 >= 0 && num141 < 267)
+						if (num141 >= 0)// && num141 < 267) This prevented mod BannerIds from syncing.
 							NPC.killCount[num141] = num142;
 					}
 					break;
@@ -2306,7 +_,7 @@
 
 						int num78 = reader.ReadInt32();
 						if (!reader.ReadBoolean()) {
-							if (TileEntity.ByID.TryGetValue(num78, out TileEntity value2) && (value2 is TETrainingDummy || value2 is TEItemFrame || value2 is TELogicSensor)) {
+							if (TileEntity.ByID.TryGetValue(num78, out TileEntity value2) && (value2 is TETrainingDummy || value2 is TEItemFrame || value2 is TELogicSensor || value2 is ModTileEntity)) {
 								TileEntity.ByID.Remove(num78);
 								TileEntity.ByPosition.Remove(value2.Position);
 							}
@@ -2761,6 +_,27 @@
 
 						break;
 					}
+				case MessageID.InGameChangeConfig:
+					ModLoader.Config.ConfigManager.HandleInGameChangeConfigPacket(reader, whoAmI);
+					return;
+				case MessageID.ModPacket:
+					ModNet.HandleModPacket(reader, whoAmI, length);
+					return;
+				case MessageID.SyncMods:
+					if (Main.netMode == 1) {
+						ModNet.SyncClientMods(reader);
+					}
+					else {
+						ModNet.SendNetIDs(whoAmI);
+						NetMessage.SendData(3, whoAmI);
+					}
+					return;
+				case MessageID.ModFile:
+					if (Main.netMode == 1)
+						ModNet.ReceiveMod(reader);
+					else
+						ModNet.SendMod(reader.ReadString(), whoAmI);
+					return;
 			}
 		}
 	}
