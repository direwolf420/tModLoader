--- src/Terraria/Terraria.GameContent.UI.Elements/UIWorldListItem.cs
+++ src/tModLoader/Terraria.GameContent.UI.Elements/UIWorldListItem.cs
@@ -1,9 +_,12 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using ReLogic.OS;
+using System;
 using Terraria.Graphics;
 using Terraria.IO;
 using Terraria.Localization;
+using Terraria.Utilities;
+using Terraria.ModLoader.Config;
 using Terraria.Social;
 using Terraria.UI;
 
@@ -24,12 +_,15 @@
 		private Texture2D _buttonPlayTexture;
 		private Texture2D _buttonSeedTexture;
 		private Texture2D _buttonDeleteTexture;
+		private Texture2D _configTexture;
+		private ulong _fileSize;
 		private UIImageButton _deleteButton;
 
 		public bool IsFavorite => _data.IsFavorite;
 
 		public UIWorldListItem(WorldFileData data, int snapPointIndex) {
 			_data = data;
+			_fileSize = (ulong)FileUtilities.GetFileSize(data.Path, data.IsCloudSave);
 			LoadTextures();
 			InitializeAppearance();
 			_worldIcon = new UIImage(GetIcon());
@@ -79,6 +_,17 @@
 				num += 24f;
 			}
 
+			//if (ConfigManager.Configs.Count > 0)
+			//{
+			//	UIImageButton configButton = new UIImageButton(this._configTexture);
+			//	configButton.VAlign = 1f;
+			//	configButton.Left.Set(num, 0f);
+			//	configButton.OnClick += new UIElement.MouseEvent(this.ConfigButtonClick);
+			//	configButton.OnMouseOver += new UIElement.MouseEvent(this.ConfigMouseOver);
+			//	configButton.OnMouseOut += new UIElement.MouseEvent(this.ButtonMouseOut);
+			//	Append(configButton);
+			//	num += 24f;
+			//}
 			UIImageButton uIImageButton5 = new UIImageButton(_buttonDeleteTexture);
 			uIImageButton5.VAlign = 1f;
 			uIImageButton5.HAlign = 1f;
@@ -116,6 +_,7 @@
 			_buttonPlayTexture = TextureManager.Load("Images/UI/ButtonPlay");
 			_buttonSeedTexture = TextureManager.Load("Images/UI/ButtonSeed");
 			_buttonDeleteTexture = TextureManager.Load("Images/UI/ButtonDelete");
+			_configTexture = ModLoader.UI.UICommon.ButtonConfigTexture;
 		}
 
 		private void InitializeAppearance() {
@@ -137,18 +_,27 @@
 		private void CloudMouseOver(UIMouseEvent evt, UIElement listeningElement) {
 			if (_data.IsCloudSave)
 				_buttonLabel.SetText(Language.GetTextValue("UI.MoveOffCloud"));
-			else
-				_buttonLabel.SetText(Language.GetTextValue("UI.MoveToCloud"));
+			else {
+				if (!ModLoader.Engine.Steam.CheckSteamCloudStorageSufficient(_fileSize))
+					_buttonLabel.SetText(Language.GetTextValue("tModLoader.CloudWarning"));
+				else
+					_buttonLabel.SetText(Language.GetTextValue("UI.MoveToCloud"));
+			}
 		}
 
 		private void PlayMouseOver(UIMouseEvent evt, UIElement listeningElement) {
+			if(_data.IsValid)
-			_buttonLabel.SetText(Language.GetTextValue("UI.Play"));
+				_buttonLabel.SetText(Language.GetTextValue("UI.Play"));
 		}
 
 		private void SeedMouseOver(UIMouseEvent evt, UIElement listeningElement) {
 			_buttonLabel.SetText(Language.GetTextValue("UI.CopySeed", _data.SeedText));
 		}
 
+		private void ConfigMouseOver(UIMouseEvent evt, UIElement listeningElement) {
+			_buttonLabel.SetText("Edit World Config");
+		}
+
 		private void DeleteMouseOver(UIMouseEvent evt, UIElement listeningElement) {
 			_deleteButtonLabel.SetText(Language.GetTextValue("UI.Delete"));
 		}
@@ -164,8 +_,12 @@
 		private void CloudButtonClick(UIMouseEvent evt, UIElement listeningElement) {
 			if (_data.IsCloudSave)
 				_data.MoveToLocal();
-			else
+			else {
+				ModLoader.Engine.Steam.RecalculateAvailableSteamCloudStorage(); //Only recalculate when about to put the file to cloud
+				if (!ModLoader.Engine.Steam.CheckSteamCloudStorageSufficient(_fileSize))
+					return; //Don't allow both the move to cloud, and the setting of the label
 				_data.MoveToCloud();
+			}
 
 			((UIImageButton)evt.Target).SetImage(_data.IsCloudSave ? _buttonCloudActiveTexture : _buttonCloudInactiveTexture);
 			if (_data.IsCloudSave)
@@ -194,7 +_,7 @@
 		}
 
 		private void PlayGame(UIMouseEvent evt, UIElement listeningElement) {
-			if (listeningElement == evt.Target) {
+			if (listeningElement == evt.Target && _data.IsValid) {
 				_data.SetAsActive();
 				Main.PlaySound(10);
 				Main.GetInputText("");
@@ -205,9 +_,29 @@
 				else
 					Main.menuMode = 10;
 
-				if (!Main.menuMultiplayer)
+				if (!Main.menuMultiplayer) {
+					ConfigManager.LoadAll(); // Makes sure MP configs are cleared.
+					if (ConfigManager.AnyModNeedsReload()) {
+						ModLoader.ModLoader.OnSuccessfulLoad += PlayReload();
+						ModLoader.ModLoader.Reload();
+						return;
+					}
+	
+					ConfigManager.OnChangedAll();
 					WorldGen.playWorld();
+				}
 			}
+		}
+
+		internal static Action PlayReload() {
+			// Main.ActivePlayerFileData gets cleared during reload
+			var path = Main.ActivePlayerFileData.Path;
+			var isCloudSave = Main.ActivePlayerFileData.IsCloudSave;
+			return () => {
+				// re-select the current player
+				Player.GetFileData(path, isCloudSave).SetAsActive();
+				WorldGen.playWorld();
+			};
 		}
 
 		private void FavoriteButtonClick(UIMouseEvent evt, UIElement listeningElement) {
@@ -231,6 +_,9 @@
 			_buttonLabel.SetText(Language.GetTextValue("UI.SeedCopied"));
 		}
 
+		private void ConfigButtonClick(UIMouseEvent evt, UIElement listeningElement) {
+		}
+
 		public override int CompareTo(object obj) {
 			UIWorldListItem uIWorldListItem = obj as UIWorldListItem;
 			if (uIWorldListItem != null) {
@@ -273,7 +_,7 @@
 			CalculatedStyle dimensions = _worldIcon.GetDimensions();
 			float num = dimensions.X + dimensions.Width;
 			Color color = _data.IsValid ? Color.White : Color.Red;
-			Utils.DrawBorderString(spriteBatch, _data.Name, new Vector2(num + 6f, dimensions.Y - 2f), color);
+			Utils.DrawBorderString(spriteBatch, _data.Name + (_data.FutureVersion ? " (1.4 Worlds are not supported)" : "") , new Vector2(num + 6f, dimensions.Y - 2f), color);
 			spriteBatch.Draw(_dividerTexture, new Vector2(num, innerDimensions.Y + 21f), null, Color.White, 0f, Vector2.Zero, new Vector2((GetDimensions().X + GetDimensions().Width - num) / 8f, 1f), SpriteEffects.None, 0f);
 			Vector2 vector = new Vector2(num + 6f, innerDimensions.Y + 29f);
 			float num2 = 100f;
